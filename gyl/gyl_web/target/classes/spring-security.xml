<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security.xsd">

    <!-- 配置不拦截的资源 -->
    <security:http pattern="/login.jsp" security="none"/>
    <security:http pattern="/failer.jsp" security="none"/>
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/img/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>

    <!--
    <security:global-method-security jsr250-annotations="enabled"/>
    <security:global-method-security secured-annotations="enabled"/>
    <security:global-method-security pre-post-annotations="disabled"/>
    -->
    <!-- 服务器端方法级权限控制-->
    <security:global-method-security jsr250-annotations="enabled"></security:global-method-security>

    <!--
    	配置具体的规则
    	auto-config="true"	不用自己编写登录的页面，框架提供默认登录页面
    	use-expressions="false"	是否使用SPEL表达式（没学习过）
    -->
    <security:http auto-config="true" use-expressions="true">
        <!-- 配置具体的拦截的规则 pattern="请求路径的规则" access="访问系统的人，必须有ROLE_user的角色" -->
        <security:intercept-url pattern="/**" access="hasRole('ROLE_USER')"/>

        <!-- 定义跳转的具体的页面 -->
        <security:form-login
                login-page="/login.jsp"
                login-processing-url="/login"
                default-target-url="/index.jsp"
                authentication-success-forward-url="/pages/main.jsp"
                authentication-failure-url="/failer.jsp"
                password-parameter="password"
                username-parameter="username"
                authentication-success-handler-ref="myAuthenticationSuccessHandler"
                authentication-failure-handler-ref="myAuthenticationFailureHandler"
        />

        <!-- 关闭csrf跨域请求 默认是开启的 -->
        <security:csrf disabled="true"/>

        <!--页面记住密码设置：true 1天-->
        <!--<security:remember-me remember-me-parameter="remembermeParamater"
                              token-validity-seconds="86400"></security:remember-me>-->

        <!--配置一个用户登陆一处:并禁止第二次登录-->
        <security:session-management>
            <security:concurrency-control max-sessions="1" error-if-maximum-exceeded="false" expired-url="/failer.jsp"></security:concurrency-control>
        </security:session-management>

        <!-- 退出登录时删除session对应的cookie ，不然下次登录（退出登录），session要报错，因为使用同一个cookies中sessionId去请求，但是session已经销毁了-->
        <security:logout delete-cookies="JSESSIONID" invalidate-session="true" logout-url="/logout" logout-success-url="/login.jsp"/>
    </security:http>

    <!-- 切换成数据库中的用户名和密码 -->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="userLoginService">
            <!--配置加密的方式-->
            <!--<security:password-encoder ref="passwordEncoder"/>-->
        </security:authentication-provider>
    </security:authentication-manager>

    <!-- 配置加密类 -->
    <!--<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>-->
    <!--配置页面端：当使用设置use-expressions="false"，又要使用在页面表达式必须配置一个bean-->
    <!--<bean id="defaultWebSecurityExpressionHandler" class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"></bean>-->

    <!-- 提供在内存中存入用户名和密码-->
    <!--<security:authentication-manager>
    	<security:authentication-provider>
    		<security:user-service>
    			<security:user name="xhw" password="{noop}xhw" authorities="ROLE_xsdd_sp"/>
    		</security:user-service>
    	</security:authentication-provider>
    </security:authentication-manager>-->
</beans>












